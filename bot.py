from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackQueryHandler
)
import json, os, subprocess

import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_TOKEN")

PRODUCTS_FILE = "products.json"
ADMIN_ID = 249385425

ADD_NAME, ADD_DESC, ADD_PHOTO = range(3)
EDIT_NAME, EDIT_DESC, EDIT_PHOTO = range(3)
CONFIRM_DELETE = 0

def load_products():
    if not os.path.exists(PRODUCTS_FILE):
        return []
    with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_products(products):
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)

def generate_site():
    subprocess.run(["python3", "generate_site.py"])

# ========== AUTH ================
def is_admin(user_id):
    return user_id == ADMIN_ID

# ========== START ===============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ üõû\n"
        "/add ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "/list ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏\n"
        "/edit ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "/delete ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "/cancel ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é"
    )

# ========== –î–û–î–ê–í–ê–ù–ù–Ø ============
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    return ADD_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    return ADD_DESC

async def add_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["desc"] = update.message.text
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")
    return ADD_PHOTO

async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    os.makedirs("images", exist_ok=True)
    file_path = f"images/{photo_file.file_id}.jpg"
    await photo_file.download_to_drive(file_path)

    products = load_products()
    products.append({
        "id": len(products) + 1,
        "name": context.user_data["name"],
        "desc": context.user_data["desc"],
        "image": file_path
    })
    save_products(products)
    generate_site()
    await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —Ç–∞ —Å–∞–π—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

# ========== –°–ö–ê–°–£–í–ê–ù–ù–Ø ============
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ========== –°–ü–ò–°–û–ö ===============
async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    products = load_products()
    if not products:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    for p in products:
        caption = f"ID: {p['id']}\n{p['name']}\n{p['desc']}"
        with open(p['image'], 'rb') as img:
            await update.message.reply_photo(photo=img, caption=caption)

# ========== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø ===============
async def edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    products = load_products()
    keyboard = [[InlineKeyboardButton(p["name"], callback_data=f"edit_{p['id']}")] for p in products]
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_NAME

async def start_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pid = int(query.data.split("_")[1])
    context.user_data["edit_id"] = pid
    await query.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É:")
    return EDIT_NAME

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å:")
    return EDIT_DESC

async def edit_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_desc"] = update.message.text
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–µ —Ñ–æ—Ç–æ:")
    return EDIT_PHOTO

async def edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    photo_file = await photo.get_file()
    file_path = f"images/{photo_file.file_id}.jpg"
    await photo_file.download_to_drive(file_path)

    products = load_products()
    pid = context.user_data["edit_id"]
    for p in products:
        if p["id"] == pid:
            p["name"] = context.user_data["new_name"]
            p["desc"] = context.user_data["new_desc"]
            p["image"] = file_path
            break
    save_products(products)
    generate_site()
    await update.message.reply_text("‚úèÔ∏è –¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

# ========== –í–ò–î–ê–õ–ï–ù–ù–Ø ===============
async def delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    products = load_products()
    keyboard = [[InlineKeyboardButton(p["name"], callback_data=f"del_{p['id']}")] for p in products]
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_DELETE

async def start_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pid = int(query.data.split("_")[1])
    context.user_data["delete_id"] = pid
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_delete")],
        [InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel")]
    ]
    await query.message.reply_text("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—à –≤–∏–¥–∞–ª–µ–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_DELETE

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm_delete":
        products = load_products()
        pid = context.user_data["delete_id"]
        products = [p for p in products if p["id"] != pid]
        for i, p in enumerate(products): p["id"] = i + 1
        save_products(products)
        generate_site()
        await query.message.reply_text("üóëÔ∏è –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await query.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ========== –ó–ê–ü–£–°–ö ==================
def main():
    app = Application.builder().token(TOKEN).build()

    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_start)],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_desc)],
            ADD_PHOTO: [MessageHandler(filters.PHOTO, add_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    edit_conv = ConversationHandler(
        entry_points=[CommandHandler("edit", edit_start)],
        states={
            EDIT_NAME: [CallbackQueryHandler(start_edit)],
            EDIT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_desc), MessageHandler(filters.PHOTO, edit_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    delete_conv = ConversationHandler(
        entry_points=[CommandHandler("delete", delete_start)],
        states={
            CONFIRM_DELETE: [CallbackQueryHandler(start_delete), CallbackQueryHandler(confirm_delete)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_products))
    app.add_handler(add_conv)
    app.add_handler(edit_conv)
    app.add_handler(delete_conv)
    app.run_polling()

if __name__ == "__main__":
    main()

